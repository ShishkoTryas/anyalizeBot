require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { ethers } = require('ethers');

// ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env');
  process.exit(1);
}

const NETWORKS = {
  ETH: {
    label: 'Ethereum',
    rpc: process.env.ETH_RPC || 'https://eth.llamarpc.com',
    ws: process.env.ETH_WS || 'wss://eth.llamarpc.com',
    factory: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',
    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
    explorer: 'https://etherscan.io/tx/'
  },
  BSC: {
    label: 'BSC',
    rpc: process.env.BSC_RPC || 'https://bsc-dataseed.binance.org/',
    ws: process.env.BSC_WS || 'wss://go.getblock.io/c63d882b922d447f9e6c9aabfe9a573f', // –ó–ê–ú–ï–ù–ò–¢–ï API KEY
    factory: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',
    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
    explorer: 'https://bscscan.com/tx/'
  },
  BASE: {
    label: 'Base',
    rpc: process.env.BASE_RPC || 'https://mainnet.base.org',
    ws: process.env.BASE_WS || 'wss://base.llamarpc.com',
    factory: '0xFDa619b6d20975be80A10332cD39b9a4b0FAa8BB',
    weth: '0x4200000000000000000000000000000000000006',
    explorer: 'https://basescan.org/tx/'
  }
};

// ABI Definitions
const FACTORY_ABI = ['function getPair(address,address) view returns (address)'];
const PAIR_ABI = [
  'event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to)',
  'function token0() external view returns (address)',
  'function token1() external view returns (address)',
  'function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast)'
];
const ERC20_ABI = [
  'function symbol() view returns (string)',
  'function decimals() view returns (uint8)',
  'function name() view returns (string)'
];

// Initialize bot
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const users = new Map();
const activeSubscriptions = new Map();

const mainMenu = {
  reply_markup: {
    keyboard: [['ETH','BSC','BASE'], ['–ó–∞–≤–µ—Ä—à–∏—Ç—å']],
    resize_keyboard: true,
    one_time_keyboard: true
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
function cleanAndValidateAddress(input) {
  let cleaned = input.replace(/[^a-fA-F0-9x]/g, '');
  cleaned = cleaned.replace(/^0x+|0x$/g, '');
  cleaned = '0x' + cleaned;
  
  if (cleaned.length !== 42) {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –∞–¥—Ä–µ—Å–∞: ${cleaned.length} —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 42)`);
  }
  
  return ethers.utils.getAddress(cleaned);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
async function getTokenInfo(address, provider) {
  try {
    const c = new ethers.Contract(address, ERC20_ABI, provider);
    const [symbol, decimals, name] = await Promise.all([
      c.symbol(),
      c.decimals(),
      c.name()
    ]);
    return { 
      symbol: symbol || 'UNKNOWN', 
      decimals: decimals || 18,
      name: name || 'Unknown Token',
      address
    };
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ:', e);
    return { 
      symbol: 'TOKEN', 
      decimals: 18,
      name: 'Unknown Token',
      address
    };
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Å–µ—Ç–µ–π
const networkProviders = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
async function getOrCreateProvider(networkKey) {
  if (networkProviders[networkKey] && networkProviders[networkKey].provider) {
    return networkProviders[networkKey].provider;
  }

  const net = NETWORKS[networkKey];
  try {
    console.log(`[${networkKey}] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ WebSocket –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...`);
    
    const provider = new ethers.providers.WebSocketProvider(net.ws);
    
    provider._networkKey = networkKey;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    provider.on('error', (error) => {
      console.error(`[${networkKey}] WebSocket Error:`, error);
    });
    
    provider._websocket.on('close', (code, reason) => {
      console.log(`[${networkKey}] WebSocket –∑–∞–∫—Ä—ã—Ç (${code}: ${reason})`);
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        console.log(`[${networkKey}] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...`);
        getOrCreateProvider(networkKey).then(newProvider => {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
          restoreSubscriptions(networkKey, newProvider);
        }).catch(e => console.error(`[${networkKey}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, e));
      }, 5000);
    });
    
    provider._websocket.on('open', () => {
      console.log(`[${networkKey}] WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    provider.getBlockNumber()
      .then(block => console.log(`[${networkKey}] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${block}`))
      .catch(e => console.error(`[${networkKey}] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:`, e));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    networkProviders[networkKey] = {
      provider,
      subscriptions: []
    };
    
    return provider;
  } catch (e) {
    console.error(`[${networkKey}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:`, e);
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        getOrCreateProvider(networkKey)
          .then(resolve)
          .catch(reject);
      }, 5000);
    });
  }
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
async function restoreSubscriptions(networkKey, newProvider) {
  const netInfo = networkProviders[networkKey];
  if (!netInfo) return;

  console.log(`[${networkKey}] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${netInfo.subscriptions.length} –ø–æ–¥–ø–∏—Å–æ–∫`);
  
  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
  for (const sub of [...netInfo.subscriptions]) {
    try {
      console.log(`[${networkKey}] –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è ${sub.tokenSymbol}...`);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥–ø–∏—Å–∫—É
      if (sub.pair && sub.pair.removeListener) {
        sub.pair.removeListener('Swap', sub.handler);
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
      const pair = new ethers.Contract(sub.pairAddress, PAIR_ABI, newProvider);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
      const [token0, token1] = await Promise.all([
        pair.token0(),
        pair.token1()
      ]);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      const swapHandler = createSwapHandler(
        sub.chatId,
        networkKey,
        sub.tokenAddress,
        token0,
        token1,
        sub.tokenInfo
      );
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      pair.on('Swap', swapHandler);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      const index = netInfo.subscriptions.findIndex(s => 
        s.pairAddress === sub.pairAddress && s.chatId === sub.chatId
      );
      
      if (index !== -1) {
        netInfo.subscriptions[index] = {
          ...sub,
          pair,
          provider: newProvider,
          handler: swapHandler,
          token0,
          token1
        };
      }
      
      console.log(`[${networkKey}] –ü–æ–¥–ø–∏—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ${sub.tokenSymbol}`);
    } catch (e) {
      console.error(`[${networkKey}] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:`, e);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π Swap
function createSwapHandler(chatId, netKey, tokenAddress, token0, token1, tokenInfo) {
  const net = NETWORKS[netKey];
  
  return async (sender, amount0In, amount1In, amount0Out, amount1Out, to, event) => {
    try {
      console.log(`[${netKey}] Swap event detected for ${tokenInfo.symbol}`);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Å–≤–∞–ø—ã
      if (amount0In.isZero() && amount1In.isZero() && 
          amount0Out.isZero() && amount1Out.isZero()) return;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–æ–∫–µ–Ω –∫—É–¥–∞ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è
      const tokenIn = amount0In.gt(0) ? token0 : 
                     amount1In.gt(0) ? token1 : null;
      const tokenOut = amount0Out.gt(0) ? token0 : 
                      amount1Out.gt(0) ? token1 : null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–∞–ø –∫–∞—Å–∞–µ—Ç—Å—è –Ω–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
      const isOurTokenIn = tokenIn && tokenIn.toLowerCase() === tokenAddress.toLowerCase();
      const isOurTokenOut = tokenOut && tokenOut.toLowerCase() === tokenAddress.toLowerCase();
      
      // –ï—Å–ª–∏ —Å–≤–∞–ø –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –Ω–∞—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (!isOurTokenIn && !isOurTokenOut) return;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
      const direction = isOurTokenIn ? "üî¥ –ü–†–û–î–ê–ñ–ê" : "üü¢ –ü–û–ö–£–ü–ö–ê";
      const baseSymbol = netKey === 'BSC' ? 'BNB' : netKey === 'BASE' ? 'ETH' : 'ETH';
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
      let tokenAmount, baseAmount;
      
      if (isOurTokenIn) {
        // –ü—Ä–æ–¥–∞–∂–∞: –Ω–∞—à —Ç–æ–∫–µ–Ω –≤—Ö–æ–¥–∏—Ç, –±–∞–∑–∞ –≤—ã—Ö–æ–¥–∏—Ç
        tokenAmount = tokenIn === token0 ? amount0In : amount1In;
        baseAmount = tokenIn === token0 ? amount1Out : amount0Out;
      } else {
        // –ü–æ–∫—É–ø–∫–∞: –±–∞–∑–∞ –≤—Ö–æ–¥–∏—Ç, –Ω–∞—à —Ç–æ–∫–µ–Ω –≤—ã—Ö–æ–¥–∏—Ç
        tokenAmount = tokenOut === token0 ? amount0Out : amount1Out;
        baseAmount = tokenOut === token0 ? amount1In : amount0In;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–¥–µ–ª–∫–∏ (–º–µ–Ω—å—à–µ 0.01 USD –≤ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ)
      const minBaseAmount = ethers.utils.parseUnits('0.01', 18);
      if (baseAmount.lt(minBaseAmount)) {
        console.log(`–ü—Ä–æ–ø—É—â–µ–Ω–∞ –º–∞–ª–µ–Ω—å–∫–∞—è —Å–¥–µ–ª–∫–∞: ${ethers.utils.formatUnits(baseAmount, 18)} ${baseSymbol}`);
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –±–ª–æ–∫–∞
      const block = await event.getBlock();
      const txTime = new Date(block.timestamp * 1000).toLocaleString();
      const explorerUrl = `${net.explorer}${event.transactionHash}`;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
      const formattedTokenAmount = ethers.utils.formatUnits(
        tokenAmount, 
        tokenInfo.decimals
      );
      
      const formattedBaseAmount = ethers.utils.formatUnits(baseAmount, 18);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
      const tokenDisplay = parseFloat(formattedTokenAmount).toLocaleString('en', {
        maximumFractionDigits: tokenInfo.decimals > 6 ? 6 : 4
      });
      
      const baseDisplay = parseFloat(formattedBaseAmount).toLocaleString('en', {
        maximumFractionDigits: 6
      });
      
      const pricePerToken = (parseFloat(formattedBaseAmount) / parseFloat(formattedTokenAmount)).toFixed(8);
      
      const message = `${direction} ${tokenInfo.symbol} (${tokenInfo.name})\n` +
        `–°–µ—Ç—å: ${net.label}\n` +
        `–°—É–º–º–∞: ${tokenDisplay} ${tokenInfo.symbol}\n` +
        `–¶–µ–Ω–∞: ${pricePerToken} ${baseSymbol}\n` +
        `–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${baseDisplay} ${baseSymbol}\n` +
        `TX: <a href="${explorerUrl}">${event.transactionHash.substring(0, 12)}...</a>\n` +
        `–í—Ä–µ–º—è: ${txTime}`;
      
      bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è:', err);
    }
  };
}

// /start handler
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  if (users.has(chatId)) {
    const user = users.get(chatId);
    user.subscriptions.forEach(unsub => unsub());
  }
  
  users.set(chatId, { 
    state: 'choose_network', 
    network: null, 
    subscriptions: [],
    tokenInfo: null
  });
  
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:', mainMenu);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = (msg.text || '').trim();
  if (!users.has(chatId)) return;
  
  const user = users.get(chatId);

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
  if (text === '–ó–∞–≤–µ—Ä—à–∏—Ç—å') {
    user.subscriptions.forEach(unsub => unsub());
    users.delete(chatId);
    return bot.sendMessage(chatId, '–ü–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã. /start –¥–ª—è –Ω–æ–≤–æ–π.');
  }

  // –í—ã–±–æ—Ä —Å–µ—Ç–∏
  if (user.state === 'choose_network') {
    if (!NETWORKS[text]) {
      return bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö: ETH, BSC –∏–ª–∏ BASE.');
    }
    
    user.network = text;
    user.state = 'enter_contract';
    return bot.sendMessage(chatId, `–°–µ—Ç—å ${text} –≤—ã–±—Ä–∞–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞:`);
  }

  // –í–≤–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞
  if (user.state === 'enter_contract') {
    user.subscriptions.forEach(unsub => unsub());
    user.subscriptions = [];
    
    const netKey = user.network;
    const net = NETWORKS[netKey];
    
    let tokenAddress;
    try {
      tokenAddress = cleanAndValidateAddress(text);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:', e.message);
      return bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ –∞–¥—Ä–µ—Å–∞: ${e.message}\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e`);
    }

    const provider = await getOrCreateProvider(netKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
    let tokenInfo;
    try {
      tokenInfo = await getTokenInfo(tokenAddress, provider);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ:', e);
      return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å.');
    }
    
    user.tokenInfo = tokenInfo;
    
    // –ò—â–µ–º –ø–∞—Ä—É —Å WETH
    const factory = new ethers.Contract(net.factory, FACTORY_ABI, provider);
    let pairAddress;
    
    try {
      pairAddress = await factory.getPair(tokenAddress, net.weth);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä—ã:', e);
      return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –ø—É–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }
    
    if (pairAddress === ethers.constants.AddressZero) {
      return bot.sendMessage(chatId, '–ü—É–ª —Å WETH –Ω–µ –Ω–∞–π–¥–µ–Ω.', mainMenu);
    }

    const pair = new ethers.Contract(pairAddress, PAIR_ABI, provider);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–∞—Ä–µ
    let token0, token1;
    try {
      [token0, token1] = await Promise.all([
        pair.token0(),
        pair.token1()
      ]);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ:', e);
      return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä–µ.');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
    const isToken0 = token0.toLowerCase() === tokenAddress.toLowerCase();
    const isToken1 = token1.toLowerCase() === tokenAddress.toLowerCase();
    
    if (!isToken0 && !isToken1) {
      return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞—Ä–µ.', mainMenu);
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    const swapHandler = createSwapHandler(
      chatId,
      netKey,
      tokenAddress,
      token0,
      token1,
      tokenInfo
    );

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    pair.on('Swap', swapHandler);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const subId = `${chatId}-${netKey}-${tokenAddress}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    if (networkProviders[netKey]) {
      networkProviders[netKey].subscriptions.push({
        chatId,
        pairAddress,
        tokenSymbol: tokenInfo.symbol,
        tokenAddress,
        tokenInfo,
        token0,
        token1,
        handler: swapHandler,
        pair,
        provider
      });
    }
    
    activeSubscriptions.set(subId, {
      network: netKey,
      pairAddress,
      pair,
      provider,
      handler: swapHandler
    });
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    const unsubscribe = () => {
      try {
        pair.removeListener('Swap', swapHandler);
        activeSubscriptions.delete(subId);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        if (networkProviders[netKey]) {
          const index = networkProviders[netKey].subscriptions.findIndex(
            sub => sub.pairAddress === pairAddress && sub.chatId === chatId
          );
          if (index !== -1) {
            networkProviders[netKey].subscriptions.splice(index, 1);
          }
        }
        
        console.log(`–û—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç ${tokenInfo.symbol} –≤ ${netKey}`);
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ:', e);
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    user.subscriptions.push(unsubscribe);
    user.state = 'choose_network';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—É–ª–∞
    try {
      const reserves = await pair.getReserves();
      const reserve0 = ethers.utils.formatUnits(reserves[0], tokenInfo.decimals);
      const reserve1 = ethers.utils.formatUnits(reserves[1], 18);
      
      bot.sendMessage(
        chatId,
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tokenInfo.symbol} (${tokenInfo.name}) –≤ —Å–µ—Ç–∏ ${net.label} –∞–∫—Ç–∏–≤–Ω–∞!\n` +
        `–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: <code>${tokenAddress}</code>\n` +
        `–ü—É–ª: <code>${pairAddress}</code>\n` +
        `–†–µ–∑–µ—Ä–≤—ã: ${parseFloat(reserve0).toFixed(2)} ${tokenInfo.symbol} / ${parseFloat(reserve1).toFixed(4)} ${netKey === 'BSC' ? 'BNB' : 'ETH'}`,
        { parse_mode: 'HTML' }
      );
      
      console.log(`–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${tokenInfo.symbol} (${net.label}), —Ä–µ–∑–µ—Ä–≤—ã: ${reserve0} / ${reserve1}`);
      
      // –ü—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setTimeout(() => {
        bot.sendMessage(
          chatId,
          `‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏...\n–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ —Å–¥–µ–ª–æ–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –ß—Ç–æ –ø—É–ª –∞–∫—Ç–∏–≤–µ–Ω\n2. –ß—Ç–æ –µ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É\n3. –ß—Ç–æ –±–æ—Ç –Ω–µ –≤—ã–≤–µ–ª –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª—å`
        );
      }, 10000);
      
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–æ–≤:', e);
      bot.sendMessage(
        chatId,
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${tokenInfo.symbol} (${tokenInfo.name}) –≤ —Å–µ—Ç–∏ ${net.label} –∞–∫—Ç–∏–≤–Ω–∞!\n` +
        `–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: <code>${tokenAddress}</code>\n` +
        `–ü—É–ª: <code>${pairAddress}</code>`,
        { parse_mode: 'HTML' }
      );
    }
  }
});

// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
setInterval(() => {
  console.log("\n===== –°–¢–ê–¢–£–° –ü–û–î–ü–ò–°–û–ö =====");
  console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  
  for (const [netKey, netInfo] of Object.entries(networkProviders)) {
    if (!netInfo) continue;
    
    let statusText = 'UNKNOWN';
    if (netInfo.provider.websocket) {
      const status = netInfo.provider.websocket.readyState;
      switch(status) {
        case 0: statusText = 'CONNECTING'; break;
        case 1: statusText = 'OPEN'; break;
        case 2: statusText = 'CLOSING'; break;
        case 3: statusText = 'CLOSED'; break;
        default: statusText = 'UNKNOWN';
      }
    }
    
    console.log(`[${netKey}] –ü–æ–¥–ø–∏—Å–æ–∫: ${netInfo.subscriptions.length}`);
    console.log(`[${netKey}] WebSocket: ${netInfo.provider.connection.url}`);
    console.log(`[${netKey}] –°—Ç–∞—Ç—É—Å: ${statusText}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
    netInfo.provider.getBlockNumber()
      .then(block => console.log(`[${netKey}] –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫: ${block}`))
      .catch(e => console.error(`[${netKey}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–∞:`, e));
  }
  console.log("==========================\n");
}, 300000); // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ–ø—Ä–æ—Å–∞
bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞–µ–º –∫–æ–º–∞–Ω–¥...');